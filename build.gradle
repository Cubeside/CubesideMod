plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id "io.github.goooler.shadow" version "8.1.7"
    id "com.modrinth.minotaur" version "2.4.3"
}

apply plugin: 'java'
apply plugin: 'fabric-loom'
apply plugin: 'maven-publish'
apply plugin: "io.github.goooler.shadow"

defaultTasks('clean', 'build', 'publishToMavenLocal')

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
    maven {url "https://maven.terraformersmc.com/releases"}
    maven {url "https://maven.shedaniel.me/"}
    maven {url "https://plugins.gradle.org/m2/"}
    maven {url "https://masa.dy.fi/maven"}
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {url "https://minecraft.guntram.de/maven/"}
    maven { url = "https://plugins.gradle.org/m2/" }
    mavenCentral()
    mavenLocal()
}

configurations {
    shade
    compileClasspath.extendsFrom shade
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modApi("com.terraformersmc:modmenu:${project.modmenu_version}")

    modImplementation include("fi.dy.masa.malilib:malilib-fabric-${project.minecraft_version_out}:${project.malilib_version}")
    modImplementation "de.cubeside.cubesideutils.fabric:CubesideUtilsFabricClient:${project.cubeside_utils_version}"

    implementation shade(platform("org.dizitart:nitrite-bom:4.2.1"))

    shade 'org.dizitart:nitrite'
    shade 'org.dizitart:nitrite-mvstore-adapter'
    implementation shade('org.dizitart:nitrite-jackson-mapper')

    modImplementation "maven.modrinth:sodium:${project.sodium_version}"

    implementation "org.joml:joml:1.10.2" // Needed for Sodium

    modImplementation "de.guntram.mcmod:durabilityviewer:${project.durabilityviewer_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:5.0.1" // Needed for DurabilityViewer
    modImplementation "dev.emi:trinkets:3.0.0" // Needed for DurabilityViewer

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

loom {
    accessWidenerPath = file("src/main/resources/cubeside.accesswidener")
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    it.options.release = 21
}

shadowJar {
    configurations = [project.configurations.shade]
    minimize()
}

remapJar {
    dependsOn shadowJar
    from zipTree(shadowJar.archivePath)
}

artifacts {
    archives shadowJar
}

tasks.publish.dependsOn build
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId archivesBaseName

            // add all the jars that should be included when publishing to maven
            //artifact(jar)             { builtBy remapJar }
            from components.java
        }
    }

    repositories {
        maven {
            url "$projectDir/../../CommonMaven"
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_id
    versionNumber = project.mod_version
    versionName = "CubesideMod ${project.minecraft_version}-${project.mod_version}"
    versionType = isMCVersionNonRelease() ? "beta" : "release"
    changelog = file("changelog.md").text
    uploadFile = remapJar
    gameVersions = [ project.minecraft_version ]
    loaders = [ "fabric" ]
    dependencies {
        required.project 'fabric-api'
    }
}

boolean isMCVersionNonRelease() {
    return project.minecraft_version.matches('^\\d\\dw\\d\\d[a-z]$') || project.minecraft_version.matches('\\d+\\.\\d+-(pre|rc)(\\d+)')
}
